import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { UsersService } from '../users/users.service';
import { Profession } from '../professions/entities/professions.entity';
import { Neighborhood } from '../neighborhoods/entities/neighborhoods.entity';
import * as bcrypt from 'bcrypt';

@Injectable()
export class SeedService {
  constructor(
    private usersService: UsersService,
    @InjectRepository(Profession)
    private professionsRepository: Repository<Profession>,
    @InjectRepository(Neighborhood)
    private neighborhoodsRepository: Repository<Neighborhood>,
  ) {}

  async seedProfessions() {
    const professions = [
      { name: 'ููุฑุจุงุฆู', description: 'ุฃุนูุงู ุงูููุฑุจุงุก ูุงูุตูุงูุฉ ุงูููุฑุจุงุฆูุฉ' },
      { name: 'ุณุจุงู', description: 'ุฃุนูุงู ุงูุณุจุงูุฉ ูุตูุงูุฉ ุงูููุงู' },
      { name: 'ูุฌุงุฑ', description: 'ุฃุนูุงู ุงููุฌุงุฑุฉ ูุงูุฃุซุงุซ' },
      { name: 'ุตุจุงุบ', description: 'ุฃุนูุงู ุงูุฏูุงู ูุงูุฏูููุฑ' },
      { name: 'ููููุงุช', description: 'ุชุฑููุจ ูุตูุงูุฉ ุงูููููุงุช' },
      { name: 'ุงูุณูุฑุงููู', description: 'ุชุฑููุจ ูุตูุงูุฉ ุงูุณูุฑุงููู ูุงูุจูุงุท' },
      { name: 'ุฌุจุณ', description: 'ุฃุนูุงู ุงูุฌุจุณ ูุงูุฏูููุฑ' },
      { name: 'ุฃูููููู', description: 'ุชุฑููุจ ุงูุฃูููููู ูุงูุดุจุงุจูู' },
      { name: 'ุญุฏุงุฏ', description: 'ุฃุนูุงู ุงูุญุฏุงุฏุฉ ูุงููุญุงู' },
      { name: 'ุชูุธูู', description: 'ุฎุฏูุงุช ุงูุชูุธูู ุงูููุฒูู' },
      { name: 'ุนุงูู ููุญุฏุงุฆู', description: 'ุชูุณูู ูุตูุงูุฉ ุงูุญุฏุงุฆู' },
      { name: 'ุนุงุฒู ุญุฑุงุฑู', description: 'ุฃุนูุงู ุงูุนุฒู ุงูุญุฑุงุฑู ูุงููุงุฆู' },
    ];

    for (const prof of professions) {
      const existing = await this.professionsRepository.findOne({ where: { name: prof.name } });
      if (!existing) {
        await this.professionsRepository.save(prof);
        console.log(`โ Created profession: ${prof.name}`);
      }
    }
    console.log('โ Professions seeding completed');
  }

  async seedNeighborhoods() {
    const neighborhoods = [
      // ุงูุณุงุญู ุงูุฃูุณุฑ
      { name: 'ุงูุฒููุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฑูุงุนู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูููุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุญุฏุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุชุญุฑูุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฅุตูุงุญ ุงูุฒุฑุงุนู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุงุฏุณูุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุญุฏุจุงุก', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูููุซุงู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุฃููู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฑุณุงูุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ููุณุทูู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุดุฑุทุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุซูู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุฑุงูุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุตุฏูู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุณูุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุถุจุงุท', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุนุฑุจู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุตุญุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุตุงุฑู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฒุฑุงุนู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุจูุฏูุงุช', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูููุตููุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุฑููู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุณููุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฑุดูุฏูุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูููุงุกุงุช', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุฌุฒุงุฆุฑ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงูุบุฒูุงูู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููููุฏุณูู', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      { name: 'ุงููุฌููุนุฉ ุงูุซูุงููุฉ', area: 'ุงูุณุงุญู ุงูุฃูุณุฑ' },
      
      // ุงูุณุงุญู ุงูุฃููู
      { name: 'ุงููุจู ูููุณ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูููุฏู ุงูุฃููู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูููุฏู ุงูุซุงููุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุฃูุฏูุณ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุดูุงุก', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุญุฑูุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุนุงูู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุตูุงุนุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูููุตู ุงูุฌุฏูุฏุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุฏูุงุณุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุจุงุจ ุงูุทูุจ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุจุงุจ ุงูุณุฑุงู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุฏูุฏุงู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูููุฏุงู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุณุงุนุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุจุงุจ ุณูุฌุงุฑ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุจุงุจ ููุด', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงููุงุฑูู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุฒูุฌููู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูููุตูุฑ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: '17 ุชููุฒ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุชู ุงูุฑูุงู', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ูุงุฏู ุญุฌุฑ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงููุงูุฑุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุจูุฑ', area: 'ุงูุณุงุญู ุงูุฃููู' },
      { name: 'ุงูุฌุงูุนุฉ', area: 'ุงูุณุงุญู ุงูุฃููู' },
    ];

    for (const neighborhood of neighborhoods) {
      const existing = await this.neighborhoodsRepository.findOne({ where: { name: neighborhood.name } });
      if (!existing) {
        await this.neighborhoodsRepository.save({
          name: neighborhood.name,
          area: neighborhood.area as 'ุงูุณุงุญู ุงูุฃููู' | 'ุงูุณุงุญู ุงูุฃูุณุฑ',
        });
        console.log(`โ Created neighborhood: ${neighborhood.name}`);
      }
    }
    console.log('โ Neighborhoods seeding completed');
  }

  async createAdminUser() {
    // Check if admin already exists
    const existingAdmin = await this.usersService.findByPhone('07700000000');
    if (existingAdmin) {
      console.log('Admin user already exists');
      return existingAdmin;
    }

    // Create admin user
    const hashedPassword = await bcrypt.hash('rheem123', 10);
    
    const adminData = {
      name: 'Rheem nail',
      email: 'rheem@admin.com',
      phone: '07700000000',
      password: hashedPassword,
      role: 'admin' as const,
      neighborhood_id: undefined,
      profile_image: undefined,
    };

    const admin = await this.usersService.create(adminData);
    console.log('Admin user created successfully:', admin.name);
    return admin;
  }

  async seedAll() {
    console.log('๐ฑ Starting database seeding...');
    await this.seedProfessions();
    await this.seedNeighborhoods();
    await this.createAdminUser();
    console.log('๐ฑ Database seeding completed!');
  }
}